#!/usr/bin/env node
const mongose = require('./../mongoose/index'),
	debug = require('debug')('myblog-server:server'),
	http = require('http'),
	port = process.env.PORT || '3000';	
	
const onError = (error) => {
	if (error.syscall !== 'listen')  throw error;
	const bind = typeof port === 'string'
		? 'Pipe ' + port
		: 'Port ' + port;
	// handle specific listen errors with friendly messages
	switch (error.code) {
	case 'EACCES':
		console.error(bind + ' requires elevated privileges');
		process.exit(1);
		break;
	case 'EADDRINUSE':
		console.error(bind + ' is already in use');
		process.exit(1);
		break;
	default:
		throw error;
	}
};

const onListening = (server) => {
	const addr = server.address();
	const bind = typeof addr === 'string'
		? 'pipe ' + addr
		: 'port ' + addr.port;
	debug('Listening on ' + bind);
};

(async ()=>{
	await mongose.connect();
	mongose.loadModels();
	try {
		const app = require('./../app');
		const server = http.createServer(app);
		app.set('port', port);
		server.listen(port);
		server.on('error', onError);
		server.on('listening', onListening.bind(undefined, server));
	} catch (err) {
		console.log(err);
	}
})();